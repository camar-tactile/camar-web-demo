{"version":3,"sources":["../../tactile-for-web/index.js","../../tactile-for-web/src/util/util.js","../../tactile-for-web/src/manager/vibrationmanager.js","../../tactile-for-web/src/manager/soundmanager.js","../../tactile-for-web/src/manager/manager.js","../../tactile-for-web/src/action/simpleaction.js","../../tactile-for-web/src/action/triggeroutsideaction.js","../../tactile-for-web/src/action/scrollaction.js","../../tactile-for-web/src/activation/corneractivation.js","../../tactile-for-web/src/activation/splitactivation.js","../../tactile-for-web/src/feedforward/simplefeedforward.js","../../tactile-for-web/src/feedforward/distancefeedforward.js","Guide.js","Split.js","Corner.js","PlaceCargo.js","ComponentSelector.js","reportWebVitals.js","index.js"],"names":["module","exports","require","scrollOffset","element","win","ownerDocument","defaultView","pageXOffset","pageYOffset","hitTest","touchX","touchY","el","i","bounds","getClientRects","length","top","left","rect","getBoundingClientRect","getOffset","right","bottom","offsetBottom","distanceBetween","targetX","targetY","currentX","currentY","dx","dy","Math","sqrt","verticalDistanceInPercentOfScreenWidth","window","screen","width","verticalDistanceInPercentOfScreenHeight","height","setBackgroundColor","hexColor","style","backgroundColor","setBackgroundColorBasedOnDistance","baseColor","target","touch","percent","distance","targetRect","distanceToTarget","pageX","pageY","distanceInPercent","parseInt","color","toString","toUpperCase","isElementAvailable","undefined","cancelCallback","callback","clearTimeout","isVibrating","onVibrationEndCallback","vibrationActivated","interrupted","vibrate","pattern","replayVibration","navigator","patternDuration","reduce","a","b","setTimeout","stop","interrupt","isVibrationActivated","document","body","addEventListener","isPlaying","currentSound","pauseSound","pause","playSound","sound","currentTime","autoplay","muted","promise","play","then","catch","error","console","log","forcePlay","active","actions","currentAction","oldAction","getCurrentAction","action","_isAvailable","getPriority","sortActions","sort","e","touches","_touchStart","isLocked","_touchEnd","_touchMove","Manager","setActions","actionList","addAction","push","clearActions","start","soundManager","vibrationManager","reset","isFeedbackActivated","SimpleAction","activation","feedForward","inSound","targetElement","activationObject","feedForwardObject","intersectionSound","actionCallback","actionDelay","vibrationPattern","targetIntersected","intersectionCallback","updateFeedForwardObject","_setTargetElement","setTargetElement","setFeedForward","setActivation","setIntersectionSound","setActionCallback","setActionDelay","delay","setVibrationPattern","util","isActivated","TriggerOutsideAction","triggerOutsideTarget","triggeringTouch","triggerCallback","triggerRepeatedly","hasTriggered","triggerAction","cancelTriggerCallback","setTriggerOutsideTarget","shouldTrigger","setTriggerRepeatedly","shouldRepeat","ScrollActionFactory","scrollDirection","scrollDir","actionTriggered","compareTouch","vibrationCompareTouch","setTriggerCallback","setScrollDirection","side","VERTICAL","HORIZONTAL","moveDistance","MOVEMENT_UP","MOVEMENT_LEFT","MOVEMENT_DOWN","MOVEMENT_RIGHT","handleMovement","ScrollAction","CornerActivationFactory","corner","priority","activationCorner","BOTTOM_RIGHT","priorityValue","cornerBuffer","buffer","x","y","TOP_LEFT","screenX","screenY","TOP_RIGHT","BOTTOM_LEFT","cornerTriggered","setActivationCorner","setActivationBuffer","setPriority","CornerActivation","SplitActivationFactory","split","activationSplit","RIGHT","splitSize","TOP","LEFT","BOTTOM","splitTriggered","setActivationSplit","SplitActivation","SimpleFeedForward","feedForwardElement","feedForwardColor","originalColor","setFeedForwardElement","setFeedForwardColor","err","DistanceFeedForward","intersectedColor","feedForwardBaseColor","targetIntersectedColor","setFeedForwardBaseColor","setTargetIntersectedColor","Guide","target1Ref","useRef","target2Ref","target3Ref","confirmRef","useEffect","current","Audio","nextTarget","nextSound","className","class","ref","Split","leftSplitRef","rightSplitRef","useState","volume","setVolume","volumeRef","temperature","setTemperature","temperatureRef","updateVolume","value","updateTemperature","leftSplit","moveDirection","rightSplit","onClick","Corner","buttonRefVolumeUp","buttonRefVolumeDown","buttonRefTempUp","buttonRefTempDown","simpleFeedForwardUp","volumeUp","simpleFeedForwardDown","volumeDown","distanceFeedForwardUp","tempUp","distanceFeedForwardDown","tempDown","PlaceCargo","optimalPositionRef","truckRef","cancelRef","confirm","cancel","display","placeCargo","disabled","event","cancelFeedForward","cancelAction","alt","src","initialComponent","ComponentSelector","vibrationStatusRef","currentComponent","setCurrentComponent","vibrationStatus","textContent","updateStatusElement","Button","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c1b54426.chunk.js","sourcesContent":["module.exports = {\r\n  ...require('./src/manager/manager'),\r\n  ...require('./src/action/simpleaction'),\r\n  ...require('./src/action/triggeroutsideaction'),\r\n  ...require('./src/action/scrollaction'),\r\n  ...require('./src/activation/corneractivation'),\r\n  ...require('./src/activation/splitactivation'),\r\n  ...require('./src/feedforward/simplefeedforward'),\r\n  ...require('./src/feedforward/distancefeedforward')\r\n};","/**\r\n * Returns bottom offset value + or - from viewport top\r\n * @param {DOMElement} el \r\n * @param {*} i \r\n */\r\nfunction offsetBottom (el, i) { i = i || 0; return el.getBoundingClientRect().bottom + scrollOffset(el).pageYOffset }\r\n\r\n/**\r\n * Returns right offset value\r\n * @param {DOMElement} el \r\n * @param {*} i \r\n */\r\nfunction offsetRight (el, i) { i = i || 0; return el.getBoundingClientRect().right + scrollOffset(el).pageXOffset }\r\n\r\n/**\r\n * Returns the current scroll offset\r\n * @param {DOMElement} element \r\n */\r\nfunction scrollOffset(element) {\r\n  let win = element.ownerDocument.defaultView;\r\n  return {\r\n    pageXOffset: win.pageXOffset,\r\n    pageYOffset: win.pageYOffset\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the offset if the given element\r\n * @param {DOMElement} element \r\n */\r\nfunction getOffset(element) {\r\n  if (!element.getClientRects().length){\r\n    return { top: 0, left: 0 };\r\n  }\r\n\r\n  let rect = element.getBoundingClientRect();\r\n  let win = scrollOffset(element)\r\n  return ({\r\n    top: rect.top + win.pageYOffset,\r\n    left: rect.left + win.pageXOffset\r\n  });   \r\n}\r\n\r\n/**\r\n * Returns the distance from a location to a target\r\n * @param {DOMElement} target \r\n * @param {number} currentX \r\n * @param {number} currentY \r\n */\r\nfunction distanceToTarget(target, currentX, currentY) {\r\n  var targetRect = target.getBoundingClientRect();\r\n  var targetX = (targetRect.left+(targetRect.right-targetRect.left)/2) + scrollOffset(target).pageXOffset;\r\n  var targetY = (targetRect.top+(targetRect.bottom-targetRect.top)/2) + scrollOffset(target).pageYOffset;\r\n  return distanceBetween(targetX, targetY, currentX, currentY);\r\n}\r\n\r\n/**\r\n * converts percentage to Hex\r\n * @param {number} percent \r\n */\r\nfunction percentToHex(percent) {\r\n  var hexValue = \"00\"\r\n  if (percent < 7) {\r\n      hexValue = \"0\"+percent.toString(16).toUpperCase();\r\n  }\r\n  else {\r\n      hexValue = percent.toString(16).toUpperCase();\r\n  }\r\n  return hexValue\r\n}\r\n\r\n/**\r\n * Returns true if the touch intersects with the element\r\n * @param {DOMElement} element \r\n * @param {number} touchX \r\n * @param {number} touchY \r\n */\r\nexport function hitTest(element, touchX, touchY) {\r\n  let bounds = getOffset(element)\r\n  bounds.right = offsetRight(element)\r\n  bounds.bottom = offsetBottom(element)\r\n  if (touchX >= bounds.left) {\r\n    if (touchX <= bounds.right) {\r\n      if (touchY >= bounds.top) {\r\n        if (touchY <= bounds.bottom) {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\n/**\r\n * Returns the distance between two points\r\n * @param {number} targetX \r\n * @param {number} targetY \r\n * @param {number} currentX \r\n * @param {number} currentY \r\n */\r\nexport function distanceBetween(targetX, targetY, currentX, currentY) {\r\n  var dx = targetX - currentX;\r\n  var dy = targetY - currentY;\r\n  var dist = Math.sqrt(dx * dx + dy * dy);\r\n  return dist;\r\n}\r\n\r\n/**\r\n * Returns the horizontal distance between two points as a percentage of the screen width\r\n * @param {number} targetX \r\n * @param {number} currentX \r\n */\r\nexport function verticalDistanceInPercentOfScreenWidth(targetX, currentX) {\r\n  var verticalDistance = targetX - currentX;\r\n  return (verticalDistance / window.screen.width) * 100\r\n}\r\n\r\n/**\r\n * Returns the vertical distance between two points as a percentage of the screen height\r\n * @param {number} targetY \r\n * @param {number} currentY \r\n */\r\nexport function verticalDistanceInPercentOfScreenHeight(targetY, currentY) {\r\n  var verticalDistance = targetY - currentY;\r\n  return (verticalDistance / window.screen.height) * 100\r\n}\r\n\r\n/**\r\n * Sets the background color of the given element\r\n * @param {DOMElement} element \r\n * @param {string} hexColor \r\n */\r\nexport function setBackgroundColor(element, hexColor) {\r\n  element.style.backgroundColor = hexColor;\r\n}\r\n\r\n/**\r\n * Sets the background color of the given element based on the distance between a touch and the target element\r\n * @param {DOMElement} element \r\n * @param {string} baseColor \r\n * @param {DOMElement} target \r\n * @param {Touch} touch \r\n */\r\nexport function setBackgroundColorBasedOnDistance(element, baseColor, target, touch) {\r\n  const distance = distanceToTarget(target, touch.pageX, touch.pageY)\r\n  const distanceInPercent = parseInt((distance / window.screen.height) * 100)\r\n  const alpha = percentToHex(distanceInPercent)\r\n  const color = baseColor + alpha\r\n  element.style.backgroundColor = color;\r\n}\r\n\r\n/**\r\n * Returns true if the given element is neither null or undefined\r\n * @param {DOMElement} element \r\n */\r\nexport function isElementAvailable(element) {\r\n  if (element !== undefined && element !== null) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Cnacels the given callback\r\n * @param {*} callback \r\n */\r\nexport function cancelCallback(callback) {\r\n  if (callback !== undefined) {\r\n    clearTimeout(callback)\r\n    callback = undefined\r\n  }\r\n  return callback\r\n}\r\n","var isVibrating = false;\r\nvar onVibrationEndCallback = undefined;\r\nvar vibrationActivated = false;\r\nvar interrupted = false\r\n\r\n/**\r\n * Registers user interaction with the screen and thereby the activation of vibrations in the browser\r\n */\r\ndocument.body.addEventListener('mouseup', function() {\r\n  vibrationActivated = true;\r\n}, true);\r\n\r\n/**\r\n * Cancels callback for replaying vibration\r\n */\r\nfunction cancelCallback() {\r\n  clearTimeout(onVibrationEndCallback)\r\n  onVibrationEndCallback = undefined\r\n}\r\n\r\n/**\r\n * Starts the given vibration\r\n * @param {VibrationPattern} pattern - The pattern to vibrate\r\n * @param {boolean} replayVibration - Should the patterne keep replaying\r\n */\r\nexport function vibrate(pattern, replayVibration) {\r\n  if (window.navigator && onVibrationEndCallback === undefined && !isVibrating) {\r\n    isVibrating = true\r\n    const patternDuration = pattern.reduce((a, b) => a + b)\r\n\r\n    const didVibrate = window.navigator.vibrate(pattern)\r\n    if (didVibrate === true) {\r\n      window.navigator.vibrate(pattern)\r\n      vibrationActivated = true\r\n    } else {\r\n      vibrationActivated = false\r\n      return;\r\n    }\r\n    \r\n    onVibrationEndCallback = window.setTimeout(() => {\r\n      if (replayVibration && isVibrating) {\r\n        stop()\r\n        if (interrupted === false) {\r\n          vibrate(pattern, replayVibration)\r\n        }\r\n        interrupted = false\r\n      } else {\r\n        stop()\r\n      }\r\n    }, patternDuration);\r\n  }\r\n}\r\n\r\n/**\r\n * Stop any vibrations\r\n */\r\nexport function stop() {\r\n  isVibrating = false;\r\n  cancelCallback()\r\n  if (window.navigator) {\r\n    window.navigator.vibrate(0)\r\n  }\r\n}\r\n\r\n/**\r\n * Interrupt replaying vibration\r\n */\r\nexport function interrupt() {\r\n  interrupted = true\r\n}\r\n\r\n/**\r\n * Returns true if vibrations has been activated by the user tapping the screen\r\n */\r\nexport function isVibrationActivated() {\r\n  return vibrationActivated\r\n}\r\n","var isPlaying = false;\r\nvar currentSound = undefined;\r\n\r\n/**\r\n * Pauses the current sound\r\n */\r\nfunction pauseSound() {\r\n  if (currentSound !== undefined) {\r\n    currentSound.pause()\r\n  }\r\n}\r\n\r\n/**\r\n * Playes a sound\r\n * @param {AudioElement} sound - The sound to be played\r\n */\r\nfunction playSound(sound) {\r\n  if (sound !== undefined && sound !== null) {\r\n    isPlaying = true;\r\n    pauseSound()\r\n    currentSound = sound;\r\n    currentSound.currentTime = 0;\r\n    currentSound.autoplay = true;\r\n    currentSound.muted = false;\r\n    var promise = currentSound.play()\r\n    if (promise !== undefined) {\r\n      promise.then(function() {}).catch(function(error) {\r\n        console.log('Error playing sound...')\r\n        console.log(error)\r\n      });\r\n    }\r\n    currentSound.addEventListener(\"ended\", function(){\r\n      currentSound.currentTime = 0;\r\n      isPlaying = false;\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Playes the given sound if another sound isn't already playing\r\n * @param {AudioElement} sound - The sound to be played\r\n */\r\nexport function play(sound) {\r\n  if (isPlaying === false) {\r\n    playSound(sound)\r\n  }\r\n}\r\n\r\n/**\r\n * Playes the given sound even if another sound is already playing\r\n * @param {AudioElement} sound - The sound to be played\r\n */\r\nexport function forcePlay(sound) {\r\n  playSound(sound)\r\n}\r\n\r\n/**\r\n * Stops any playing sound\r\n */\r\nexport function stop() {\r\n  isPlaying = false;\r\n  pauseSound()\r\n}\r\n","import * as vibrationManager from \"./vibrationmanager\"\r\nimport * as soundManager from \"./soundmanager\"\r\n\r\nvar active = false\r\n\r\nvar actions = []\r\nvar currentAction = undefined\r\nvar oldAction = undefined\r\n\r\n/**\r\n * Handles touchstart events and delegates them to the correct Action\r\n */\r\ndocument.addEventListener('touchstart', function(e) {\r\n  if (active !== true) {\r\n    return\r\n  }\r\n  const touch = e.touches[0]\r\n\r\n  oldAction = undefined\r\n  currentAction = getCurrentAction(touch)\r\n  \r\n  if (currentAction !== undefined) {\r\n    currentAction._touchStart(touch)\r\n  }\r\n}, false);\r\n\r\n/**\r\n * Handles touchmove events and delegates them to the correct Action\r\n */\r\ndocument.addEventListener('touchmove', function(e) {\r\n  if (active !== true || currentAction === undefined) {\r\n    return\r\n  }\r\n  const touch = e.touches[0]\r\n\r\n  if (currentAction.isLocked() !== true) {\r\n    oldAction = currentAction\r\n    currentAction = getCurrentAction(touch)\r\n    if (oldAction !== currentAction) {\r\n      oldAction._touchEnd(touch)\r\n      currentAction._touchStart(touch)\r\n    }\r\n  }\r\n\r\n  currentAction._touchMove(touch)\r\n}, false);\r\n\r\n/**\r\n * Handles touchend events and delegates them to the correct Action\r\n */\r\ndocument.addEventListener('touchend', function(e) {\r\n  if (active !== true || currentAction === undefined) {\r\n    return\r\n  }\r\n\r\n  currentAction._touchEnd(e.touches[0])\r\n  currentAction = undefined\r\n  oldAction = undefined\r\n}, false);\r\n\r\n/**\r\n * Returns the currently activated Action\r\n * @param {Touch} touch - The current touch of the user\r\n */\r\nfunction getCurrentAction(touch) {\r\n  for (var i = 0; i < actions.length; i++) {\r\n    const action = actions[i]\r\n    if (action._isAvailable(touch)) {\r\n      return action\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the priority of an Action\r\n * @param {Action} action \r\n */\r\nfunction getPriority(action) {\r\n  if (action !== undefined) {\r\n    if (action.getPriority() !== undefined) {\r\n      return action.getPriority()\r\n    }\r\n  }\r\n\r\n  return -1\r\n}\r\n\r\n/**\r\n * Sorts (descending) actions based on their priority\r\n * @param {[Action]} actions \r\n */\r\nfunction sortActions(actions) {\r\n  actions.sort((a, b) => (getPriority(a) < getPriority(b)) ? 1 : -1)\r\n}\r\n\r\nexport const Manager = {\r\n  /**\r\n   * Sets the list of actions\r\n   * @param {[Action]} actionList \r\n   */\r\n  setActions: (actionList) => {\r\n    actions = actionList\r\n    sortActions(actions)\r\n    currentAction = undefined\r\n  },\r\n\r\n  /**\r\n   * Adds an Action to the list of actions\r\n   * @param {Action} action \r\n   */\r\n  addAction: (action) => {\r\n    actions.push(action)\r\n    sortActions(actions)\r\n  },\r\n  \r\n  /**\r\n   * Clears the list of actions\r\n   */\r\n  clearActions: () => {\r\n    actions = []\r\n    currentAction = undefined\r\n  },\r\n  \r\n  /**\r\n   * Activates the handling of touch events\r\n   */\r\n  start: () => {\r\n    active = true\r\n  },\r\n  \r\n  /**\r\n   * Deactivates the handling of touch events\r\n   */\r\n  stop: () => {\r\n    active = false\r\n    soundManager.stop()\r\n    vibrationManager.interrupt()\r\n  },\r\n  \r\n  /**\r\n   * Stops the handling of touch events and clears the list of actions\r\n   */\r\n  reset: () => {\r\n    Manager.stop()\r\n    Manager.clearActions()\r\n    vibrationManager.stop()\r\n  },\r\n  \r\n  /**\r\n   * Plays a sound\r\n   * @param {AudioElement} sound - The sound to be played\r\n   * @param {boolean} forcePlay - Should interrupt if a sound is already being played\r\n   */\r\n  playSound: (sound, forcePlay) => {\r\n    if (forcePlay === true) {\r\n      soundManager.forcePlay(sound)\r\n    } else {\r\n      soundManager.play(sound)\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * returns true if the user has tapped the screen and enabled vibrations and sounds in the browser\r\n   */\r\n  isFeedbackActivated: () => {\r\n    return vibrationManager.isVibrationActivated()\r\n  }\r\n};\r\n","import * as util from \"../util/util\"\r\nimport * as vibrationManager from \"../manager/vibrationmanager\"\r\nimport * as soundManager from \"../manager/soundmanager\"\r\n\r\n/**\r\n * An Action that triggeres a callback when the target element is intersected by the users touch.\r\n * The action also handles sound and vibration feedback based on the users touch input.\r\n * @param {DOMElement} target - The target element of the action.\r\n * @param {ActivationObject} activation - (optional) Object to handle activaion of action.\r\n * @param {feedforwardObject} feedForward - (optional) Object to handle feedforward .\r\n * @param {AudioElement} inSound - (optional) Audio element to be played when callback is triggered.\r\n * @param {function} callback - Callback to be triggered.\r\n */\r\nconst SimpleActionFactory = (target, activation, feedForward, inSound, callback) => {\r\n\r\n  let targetElement = target\r\n  let activationObject = activation\r\n  let feedForwardObject = feedForward\r\n  let intersectionSound = inSound\r\n\r\n  let actionCallback = callback\r\n  let actionDelay = 1000\r\n\r\n  let vibrationPattern = [0,  85, 300,  85, 300,  85]\r\n\r\n  let targetIntersected = false\r\n  let intersectionCallback = undefined\r\n\r\n  /**\r\n   * Updates the FeedforwardObjects target element\r\n   * @param {DOMElement} targetElement - The target element of Action\r\n   */\r\n  let updateFeedForwardObject = (targetElement) => {\r\n    if (feedForwardObject !== undefined) {\r\n      feedForwardObject._setTargetElement(targetElement)\r\n    }\r\n  }\r\n\r\n  updateFeedForwardObject(targetElement)\r\n\r\n  return ({\r\n    /**\r\n     * Sets the target element of the action\r\n     * @param {DOMElement} element - The DOM element to be set as target\r\n     */\r\n    setTargetElement: (element) => {\r\n      targetElement = element\r\n      updateFeedForwardObject(targetElement)\r\n    },\r\n\r\n    /**\r\n     * Sets the feedforward object on the action\r\n     * @param {FeedforwardObject} feedForward - The object to be set as FeedforwardObject\r\n     */\r\n    setFeedForward: (feedForward) => {\r\n      feedForwardObject = feedForward\r\n      updateFeedForwardObject(targetElement)\r\n    },\r\n\r\n    /**\r\n     * Sets the activation object on the action\r\n     * @param {ActivationObject} activation - The object to be set as ActivationObject\r\n     */\r\n    setActivation: (activation) => {\r\n      activationObject = activation\r\n    },\r\n\r\n    /**\r\n     * Sets the interactionSound of the action\r\n     * @param {AudioElement} sound - The Audio element to be set as interactionSound\r\n     */\r\n    setIntersectionSound: (sound) => {\r\n      intersectionSound = sound\r\n    },\r\n\r\n    /**\r\n     * Sets the action callback on the action\r\n     * @param {function} callback - The function to be set as the actionCallback\r\n     */\r\n    setActionCallback: (callback) => {\r\n      actionCallback = callback\r\n    },\r\n\r\n    /**\r\n     * Sets the delay for when the callback is triggered when the target is intersectedd\r\n     * @param {number} delay - The delay in miliseconds\r\n     */\r\n    setActionDelay: (delay) => {\r\n      actionDelay = delay\r\n    },\r\n\r\n    /**\r\n     * Sets the vibration pattern\r\n     * @param {VibrationPattern} pattern - The vibration pattern\r\n     */\r\n    setVibrationPattern: (pattern) => {\r\n      vibrationPattern = pattern\r\n    },\r\n\r\n    /**\r\n     * Returns the priority of the action\r\n     */\r\n    getPriority: () => {\r\n      if (activation !== undefined) {\r\n        return activation.getPriority()\r\n      }\r\n      return -1\r\n    },\r\n\r\n    /**\r\n     * Returns true if the users current touch session is locked to this action or false otherwise.\r\n     */\r\n    isLocked: () => {\r\n      return true\r\n    },\r\n    \r\n    /**\r\n     * Returns true if the action is available for interaction for the current touch.\r\n     * @param {Touch} touch - The current touch of the user \r\n     */\r\n    _isAvailable: (touch) => {\r\n      if (!util.isElementAvailable(targetElement)) {\r\n        return false\r\n      }\r\n      if (activationObject === undefined) {\r\n        return true\r\n      }\r\n\r\n      return activationObject.isActivated(touch)\r\n    },\r\n\r\n    /**\r\n     * Handles the start event of a touch session\r\n     * @param {Touch} touch - The current touch of the user\r\n     */\r\n    _touchStart: (touch) => {\r\n      if (feedForwardObject !== undefined) {\r\n        feedForwardObject._touchStart(touch)\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handles the move event during a touch session\r\n     * @param {Touch} touch - The current touch of the user \r\n     */\r\n    _touchMove: (touch) => {\r\n      if (util.isElementAvailable(targetElement)) {\r\n        if (feedForwardObject !== undefined) {\r\n          feedForwardObject._touchMove(touch)\r\n        }\r\n        \r\n        // Check if the touch has intersected the targetElement\r\n        if (util.hitTest(targetElement, touch.pageX, touch.pageY)) {\r\n          if (targetIntersected !== true) {\r\n            targetIntersected = true\r\n            if (actionCallback !== undefined && intersectionCallback === undefined) {\r\n              intersectionCallback = window.setTimeout(() => {\r\n                actionCallback(targetElement)\r\n                intersectionCallback = undefined\r\n              }, actionDelay)\r\n            }\r\n            \r\n            vibrationManager.vibrate(vibrationPattern, true)\r\n            soundManager.forcePlay(intersectionSound)            \r\n          }\r\n        }\r\n        else {\r\n          targetIntersected = false\r\n          intersectionCallback = util.cancelCallback(intersectionCallback)\r\n          vibrationManager.stop()\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handles the end of a touch session\r\n     * @param {Touch} touch - The current touch of the user \r\n     */\r\n    _touchEnd: (touch) => {\r\n      if (feedForwardObject !== undefined) {\r\n        feedForwardObject._touchEnd(touch)\r\n      }\r\n      targetIntersected = false\r\n      intersectionCallback = util.cancelCallback(intersectionCallback)\r\n      vibrationManager.stop();\r\n      soundManager.stop();\r\n    }\r\n  });\r\n };\r\n\r\n export const SimpleAction = SimpleActionFactory;\r\n","import * as util from \"../util/util\"\r\nimport * as vibrationManager from \"../manager/vibrationmanager\"\r\nimport * as soundManager from \"../manager/soundmanager\"\r\n\r\n\r\n/**\r\n * An Action that triggeres a callback when the target element is intersected by the users touch.\r\n * The callback can be triggered inside or outside the tagget element based on the setup.\r\n * The callback can be triggered once or repeatedly based on the setup.\r\n * The action also handles sound and vibration feedback based on the users touch input.\r\n * @param {DOMElement} target - The target element of the action.\r\n * @param {ActivationObject} activation - (optional) Object to handle activaion of action.\r\n * @param {feedforwardObject} feedForward - (optional) Object to handle feedforward .\r\n * @param {AudioElement} inSound - (optional) Audio element to be played when callback is triggered.\r\n * @param {function} callback - Callback to be triggered.\r\n */\r\nconst TriggerOutsideActionFactory = (target, activation, feedForward, inSound, callback) => {\r\n\r\n  let targetElement = target\r\n  let activationObject = activation\r\n  let feedForwardObject = feedForward\r\n  let intersectionSound = inSound\r\n\r\n  let actionCallback = callback\r\n  let actionDelay = 500\r\n\r\n  let vibrationPattern = [0,  85, 300,  85, 300,  85]\r\n\r\n  let targetIntersected = false\r\n\r\n  let triggerOutsideTarget = false\r\n  let triggeringTouch = undefined\r\n  let triggerCallback = false\r\n\r\n  let triggerRepeatedly = false\r\n  let hasTriggered = false\r\n\r\n  /**\r\n   * Sets the timeout that will trigger the actionCallback after actionDelay\r\n   * @param {Touch} touch - The current touch of the user \r\n   */\r\n  let triggerAction = (touch) => {\r\n    triggeringTouch = touch\r\n    \r\n    triggerCallback = window.setTimeout(() => {\r\n      vibrationManager.vibrate(vibrationPattern, false)\r\n      soundManager.play(intersectionSound)\r\n\r\n      actionCallback(targetElement)\r\n      hasTriggered = true\r\n      \r\n      cancelTriggerCallback()\r\n      if (triggerRepeatedly === true) {\r\n        triggerAction(touch) \r\n      }\r\n    }, actionDelay)\r\n  }\r\n\r\n  /**\r\n   * Cancels the triggering callback\r\n   */\r\n  let cancelTriggerCallback = () => {\r\n    if (triggerCallback !== undefined) {\r\n      clearTimeout(triggerCallback)\r\n      triggerCallback = undefined\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Updates the FeedforwardObjects target element\r\n   * @param {DOMElement} targetElement - The target element of Action\r\n   */\r\n  let updateFeedForwardObject = (target) => {\r\n    if (feedForwardObject !== undefined) {\r\n      feedForwardObject._setTargetElement(targetElement)\r\n    }\r\n  }\r\n\r\n  updateFeedForwardObject(targetElement)\r\n\r\n  return ({\r\n    /**\r\n     * Sets the target element of the action\r\n     * @param {DOMElement} element - The DOM element to be set as target\r\n     */\r\n    setTargetElement: (element) => {\r\n      targetElement = element\r\n      updateFeedForwardObject(targetElement)\r\n    },\r\n\r\n    /**\r\n     * Sets the feedforward object on the action\r\n     * @param {FeedforwardObject} feedForward - The object to be set as FeedforwardObject\r\n     */\r\n    setFeedForward: (feedForward) => {\r\n      feedForwardObject = feedForward\r\n      updateFeedForwardObject(targetElement)\r\n    },\r\n\r\n    /**\r\n     * Sets the activation object on the action\r\n     * @param {ActivationObject} activation - The object to be set as ActivationObject\r\n     */\r\n    setActivation: (activation) => {\r\n      activationObject = activation\r\n    },\r\n\r\n    /**\r\n     * Sets the interactionSound of the action\r\n     * @param {AudioElement} sound - The Audio element to be set as interactionSound\r\n     */\r\n    setIntersectionSound: (sound) => {\r\n      intersectionSound = sound\r\n    },\r\n\r\n    /**\r\n     * Sets the action callback on the action\r\n     * @param {function} callback - The function to be set as the actionCallback\r\n     */\r\n    setActionCallback: (callback) => {\r\n      actionCallback = callback\r\n    },\r\n\r\n    /**\r\n     * Sets the delay for when the callback is triggered when the target is intersectedd\r\n     * @param {number} delay - The delay in miliseconds\r\n     */\r\n    setActionDelay: (delay) => {\r\n      actionDelay = delay\r\n    },\r\n\r\n    /**\r\n     * Sets the vibration pattern\r\n     * @param {VibrationPattern} pattern - The vibration pattern\r\n     */\r\n    setVibrationPattern: (pattern) => {\r\n      vibrationPattern = pattern\r\n    },\r\n\r\n    /**\r\n     * Sets if the action should be triggered outside the targetElement\r\n     * @param {boolean} shouldTrigger \r\n     */\r\n    setTriggerOutsideTarget: (shouldTrigger) => {\r\n      triggerOutsideTarget = shouldTrigger\r\n    },\r\n\r\n    /**\r\n     * Sets if the action should be triggered repeatedly or only once per touch session\r\n     * @param {boolean} shouldRepeat \r\n     */\r\n    setTriggerRepeatedly: (shouldRepeat) => {\r\n      triggerRepeatedly = shouldRepeat\r\n    },\r\n\r\n    /**\r\n     * Returns the priority of the action\r\n     */\r\n    getPriority: () => {\r\n      if (activation !== undefined) {\r\n        return activation.getPriority()\r\n      }\r\n      return -1\r\n    },\r\n\r\n    /**\r\n     * Returns true if the users current touch session is locked to this action or false otherwise.\r\n     */\r\n    isLocked: () => {\r\n      return true\r\n    },\r\n    \r\n    /**\r\n     * Returns true if the action is available for interaction for the current touch.\r\n     * @param {Touch} touch - The current touch of the user \r\n     */\r\n    _isAvailable: (touch) => {\r\n      if (!util.isElementAvailable(targetElement)) {\r\n        return false\r\n      }\r\n      if (activationObject === undefined) {\r\n        return true\r\n      }\r\n\r\n      return activationObject.isActivated(touch)\r\n    },\r\n\r\n    /**\r\n     * Handles the start event of a touch session\r\n     * @param {Touch} touch - The current touch of the user\r\n     */\r\n    _touchStart: (touch) => {\r\n      if (feedForwardObject !== undefined) {\r\n        feedForwardObject._touchStart(touch)\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handles the move event during a touch session\r\n     * @param {Touch} touch - The current touch of the user \r\n     */\r\n    _touchMove: (touch) => {\r\n      if (util.isElementAvailable(targetElement)) {\r\n        if (feedForwardObject !== undefined) {\r\n          feedForwardObject._touchMove(touch)\r\n        }\r\n\r\n        if (triggerRepeatedly === true || hasTriggered === false) {\r\n          \r\n          // If the action should trigger outside the targetElement\r\n          if (triggerOutsideTarget === true) {\r\n            if (triggeringTouch !== undefined) {\r\n              var distanceToTrigger = util.distanceBetween(triggeringTouch.pageX, triggeringTouch.pageY, touch.pageX, touch.pageY)\r\n              if (distanceToTrigger > 100) {\r\n                cancelTriggerCallback()\r\n                triggerAction(touch)\r\n              }\r\n            } else {\r\n              triggerAction(touch)\r\n            }\r\n    \r\n            return\r\n          }\r\n          \r\n          // If the action should only trigger if the targetElement is intersected\r\n          if (util.hitTest(targetElement, touch.pageX, touch.pageY)) {\r\n            if (targetIntersected !== true) {\r\n              targetIntersected = true\r\n              vibrationManager.vibrate(vibrationPattern, false)\r\n              cancelTriggerCallback()\r\n              triggerAction(touch)\r\n            }\r\n          } else {\r\n            if (triggerOutsideTarget !== true) {\r\n              cancelTriggerCallback()\r\n            }\r\n            targetIntersected = false\r\n            vibrationManager.stop()\r\n            soundManager.stop()\r\n          }\r\n\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handles the end of a touch session\r\n     * @param {Touch} touch - The current touch of the user \r\n     */\r\n    _touchEnd: (touch) => {\r\n      if (feedForwardObject !== undefined) {\r\n        feedForwardObject._touchEnd(touch)\r\n      }\r\n\r\n      targetIntersected = false\r\n      hasTriggered = false\r\n      cancelTriggerCallback()\r\n      vibrationManager.stop();\r\n      soundManager.stop();\r\n    }\r\n  });\r\n };\r\n\r\n export const TriggerOutsideAction = TriggerOutsideActionFactory;\r\n","import * as util from \"../util/util\"\r\nimport * as vibrationManager from \"../manager/vibrationmanager\"\r\nimport * as soundManager from \"../manager/soundmanager\"\r\n\r\n\r\n/**\r\n * An Action that triggeres a callback when the user scrolls on the specified directions.\r\n * The action also handles sound and vibration feedback based on the users touch input.\r\n * @param {string} scrollDirection - The direction/axis on wich the user can trigger the callback through scrolling\r\n * @param {ActivationObject} activation - (optional) Object to handle activaion of action.\r\n * @param {feedforwardObject} feedForward - (optional) Object to handle feedforward .\r\n * @param {function} callback - Callback to be triggered.\r\n */\r\nconst ScrollActionFactory = (scrollDirection, activation, feedForward, callback) => {\r\n  let scrollDir = scrollDirection\r\n  let activationObject = activation\r\n  let feedForwardObject = feedForward\r\n\r\n  let actionCallback = callback\r\n  let actionDelay = 500\r\n\r\n  let actionTriggered = false\r\n  let triggeringTouch = undefined\r\n  let compareTouch = undefined\r\n  let vibrationCompareTouch = undefined\r\n  let triggerCallback = undefined\r\n\r\n  let vibrationPattern = [150, 50, 150, 50]\r\n\r\n  /**\r\n   * Handling the users movement/scroll when the action has been triggered\r\n   * @param {Touch} touch - The current touch of the user\r\n   */\r\n  let handleMovement = (touch) => {\r\n    if (compareTouch === undefined) {\r\n      console.log('compareTouch initialized')\r\n      compareTouch = touch\r\n    } \r\n  \r\n    if (vibrationCompareTouch === undefined) {\r\n      console.log('vibrationCompareTouch initialized')\r\n      vibrationCompareTouch = touch\r\n    } \r\n    \r\n    // We want to vibrate with a higher frequency then we trigger the callback\r\n    const moveDistance = scrollDir == ScrollActionFactory.VERTICAL ? util.verticalDistanceInPercentOfScreenHeight(vibrationCompareTouch.pageY, touch.pageY) : util.verticalDistanceInPercentOfScreenWidth(vibrationCompareTouch.pageX, touch.pageX)\r\n    if (moveDistance > .5 || moveDistance < -.5) {\r\n      vibrationManager.vibrate([50, 10], false);\r\n      vibrationCompareTouch = touch\r\n    }\r\n  \r\n    // Trigger the callback if the scroll distance is larger than the threshold.\r\n    const distance = scrollDir == ScrollActionFactory.VERTICAL ? util.verticalDistanceInPercentOfScreenHeight(compareTouch.pageY, touch.pageY) : util.verticalDistanceInPercentOfScreenWidth(compareTouch.pageX, touch.pageX)\r\n    if (distance > 2.5 || distance < -2.5) {\r\n      var moveDirection\r\n      if (distance > 0) {\r\n        moveDirection = scrollDir == ScrollActionFactory.VERTICAL ? ScrollActionFactory.MOVEMENT_UP : ScrollActionFactory.MOVEMENT_LEFT\r\n      } else {\r\n        moveDirection = scrollDir == ScrollActionFactory.VERTICAL ? ScrollActionFactory.MOVEMENT_DOWN : ScrollActionFactory.MOVEMENT_RIGHT\r\n      }\r\n      actionCallback(moveDirection)\r\n      compareTouch = touch\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Sets the callback that enables the scroll interactions\r\n   * @param {Touch} touch - The current touch of the user\r\n   */\r\n  let setTriggerCallback = (touch) => {\r\n    console.log(\"setTriggerCallback\")\r\n    triggeringTouch = touch\r\n\r\n    triggerCallback = window.setTimeout(() => {\r\n      vibrationManager.vibrate(vibrationPattern, false);\r\n      actionTriggered = true\r\n      compareTouch = undefined\r\n      vibrationCompareTouch = undefined\r\n    }, actionDelay);\r\n  }\r\n\r\n  /**\r\n   * Cancels the triggering callback\r\n   */\r\n  let cancelTriggerCallback = () => {\r\n    if (triggerCallback !== undefined) {\r\n      clearTimeout(triggerCallback)\r\n      triggerCallback = undefined\r\n    }\r\n  }\r\n\r\n  return ({\r\n    /**\r\n     * Sets the scroll direction/axis on wich the user can trigger the callback through scrolling\r\n     * @param {string} scrollDirection - The scroll direction/axis\r\n     */\r\n    setScrollDirection: (scrollDirection) => {\r\n      if (side === ScrollActionFactory.VERTICAL || \r\n        side === ScrollActionFactory.HORIZONTAL) {\r\n          scrollDir = scrollDirection\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Sets the feedforward object on the action\r\n     * @param {FeedforwardObject} feedForward - The object to be set as FeedforwardObject\r\n     */\r\n    setFeedForward: (feedForward) => {\r\n      feedForwardObject = feedForward\r\n    },\r\n\r\n    /**\r\n     * Sets the activation object on the action\r\n     * @param {ActivationObject} activation - The object to be set as ActivationObject\r\n     */\r\n    setActivation: (activation) => {\r\n      activationObject = activation\r\n    },\r\n\r\n    /**\r\n     * Sets the action callback on the action\r\n     * @param {function} callback - The function to be set as the actionCallback\r\n     */\r\n    setActionCallback: (callback) => {\r\n      actionCallback = callback\r\n    },\r\n\r\n    /**\r\n     * Sets the delay for when the scroll functionality is enabled\r\n     * @param {number} delay - The delay in miliseconds\r\n     */\r\n    setActionDelay: (delay) => {\r\n      actionDelay = delay\r\n    },\r\n\r\n    /**\r\n     * Sets the vibration pattern\r\n     * @param {VibrationPattern} pattern - The vibration pattern\r\n     */\r\n    setVibrationPattern: (pattern) => {\r\n      vibrationPattern = pattern\r\n    },\r\n\r\n    /**\r\n     * Returns the priority of the action\r\n     */\r\n    getPriority: () => {\r\n      if (activation !== undefined) {\r\n        return activation.getPriority()\r\n      }\r\n      return -1\r\n    },\r\n\r\n    /**\r\n     * Returns true if the users current touch session is locked to this action or false otherwise.\r\n     */\r\n    isLocked: () => {\r\n      return actionTriggered\r\n    },\r\n\r\n    /**\r\n     * Returns true if the action is available for interaction for the current touch.\r\n     * @param {Touch} touch - The current touch of the user \r\n     */\r\n    _isAvailable: (touch) => {\r\n      if (activationObject === undefined) {\r\n        return true\r\n      }\r\n\r\n      return activationObject.isActivated(touch)\r\n    },\r\n    \r\n    /**\r\n     * Handles the start event of a touch session\r\n     * @param {Touch} touch - The current touch of the user\r\n     */\r\n    _touchStart: (touch) => {\r\n      if (feedForwardObject !== undefined) {\r\n        feedForwardObject._touchStart(touch)\r\n      }\r\n\r\n      setTriggerCallback(touch)\r\n    },\r\n\r\n    /**\r\n     * Handles the move event during a touch session\r\n     * @param {Touch} touch - The current touch of the user \r\n     */\r\n    _touchMove: (touch) => {\r\n      if (feedForwardObject !== undefined) {\r\n        feedForwardObject._touchMove(touch)\r\n      }\r\n\r\n      if (triggeringTouch !== undefined) {\r\n        if (actionTriggered === true) {\r\n          handleMovement(touch);\r\n        } else {\r\n          const distanceToTrigger = util.distanceBetween(triggeringTouch.pageX, triggeringTouch.pageY, touch.pageX, touch.pageY)\r\n          if (distanceToTrigger > 100) {\r\n            cancelTriggerCallback()\r\n            setTriggerCallback(touch)\r\n          }\r\n        }\r\n      } else {\r\n        cancelTriggerCallback()\r\n        setTriggerCallback(touch)\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handles the end of a touch session\r\n     * @param {Touch} touch - The current touch of the user \r\n     */\r\n    _touchEnd: (touch) => {\r\n      if (feedForwardObject !== undefined) {\r\n        feedForwardObject._touchEnd(touch)\r\n      }\r\n\r\n      actionTriggered = false\r\n      cancelTriggerCallback()\r\n      vibrationManager.stop();\r\n      soundManager.stop();\r\n    }\r\n  });\r\n};\r\n\r\n// Supported scroll/movement axis\r\nScrollActionFactory.VERTICAL = 'vertical'\r\nScrollActionFactory.HORIZONTAL = 'horizontal'\r\n\r\n// Supported scroll/mevement directions\r\nScrollActionFactory.MOVEMENT_UP = 'movementUp'\r\nScrollActionFactory.MOVEMENT_DOWN = 'movementDown'\r\nScrollActionFactory.MOVEMENT_LEFT = 'movementLeft'\r\nScrollActionFactory.MOVEMENT_RIGHT = 'movementRight'\r\n\r\nexport const ScrollAction = ScrollActionFactory;\r\n","/**\r\n * An Activation that activates if a touch event is inside the selected activation corner\r\n * The priority of the Activation helps prioritize between two overlaping Activation instances\r\n * @param {string} corner - The selected activation corner\r\n * @param {number} priority - The priority of the Activation\r\n */\r\nconst CornerActivationFactory = (corner, priority) => {\r\n  let activationCorner = CornerActivationFactory.BOTTOM_RIGHT\r\n  let priorityValue = 1\r\n  let cornerBuffer = 0.2\r\n\r\n  if (corner !== undefined) {\r\n    activationCorner = corner\r\n  }\r\n\r\n  if (priority !== undefined) {\r\n    priorityValue = priority\r\n  }\r\n\r\n  /**\r\n   * Returns true if the touch event is inside the selected activation corner and false otherwise.\r\n   * @param {Touch} touch - The current touch of the user \r\n   * @param {string} corner - The selected activation corner\r\n   * @param {number} buffer - The size of the corner area as a fraction of the screen width and height\r\n   */\r\n  let cornerTriggered = (touch, corner, buffer) => {\r\n    var x, y\r\n    const width = window.screen.width\r\n    const height = window.screen.height\r\n    switch(corner) {\r\n      case CornerActivationFactory.TOP_LEFT:\r\n        x = width * buffer\r\n        y = height * buffer\r\n        if (touch.screenX < x && touch.screenY < y) {\r\n          return true\r\n        }\r\n        break\r\n      case CornerActivationFactory.TOP_RIGHT:\r\n        x = width * (1 - buffer)\r\n        y = height * buffer\r\n        if (touch.screenX > x && touch.screenY < y) {\r\n          return true\r\n        }\r\n        break\r\n      case CornerActivationFactory.BOTTOM_LEFT:\r\n        x = width * buffer\r\n        y = height * (1 - buffer)\r\n        if (touch.screenX < x && touch.screenY > y) {\r\n          return true\r\n        }\r\n        break\r\n      case CornerActivationFactory.BOTTOM_RIGHT:\r\n        x = width * (1 - buffer)\r\n        y = height * (1 - buffer)\r\n        if (touch.screenX > x && touch.screenY > y) {\r\n          return true\r\n        }\r\n        break\r\n      default:\r\n        return false\r\n    }\r\n    return false\r\n  }\r\n\r\n  return ({\r\n    /**\r\n     * Returns true if the Activation has been activated by the touch\r\n     * @param {Touch} touch - The current touch of the user\r\n     */\r\n    isActivated: (touch) => {\r\n      if (activationCorner === undefined) {\r\n        return false\r\n      }\r\n\r\n      return cornerTriggered(touch, activationCorner, cornerBuffer)\r\n    },\r\n\r\n    /**\r\n     * Sets the activation corner\r\n     * @param {string} corner - The activation corner\r\n     */\r\n    setActivationCorner: (corner) => {\r\n      if (corner === CornerActivationFactory.TOP_LEFT || \r\n        corner === CornerActivationFactory.TOP_RIGHT || \r\n        corner === CornerActivationFactory.BOTTOM_LEFT || \r\n        corner === CornerActivationFactory.BOTTOM_RIGHT) {\r\n          activationCorner = corner\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Sets the activation buffer as the fraction of the screen height/width giving the corner size\r\n     * @param {*} buffer - The fraction of the screen height/width\r\n     */\r\n    setActivationBuffer: (buffer) => {\r\n      cornerBuffer = buffer\r\n    },\r\n\r\n    /**\r\n     * Returns the priority of the action\r\n     */\r\n    getPriority: () => {\r\n      return priorityValue\r\n    },\r\n\r\n    /**\r\n     * Sets the priority of the action\r\n     * @param {number} priority - The priority\r\n     */\r\n    setPriority: (priority) => {\r\n      priorityValue = priority\r\n    },\r\n    \r\n  });\r\n};\r\n\r\n// Supported activation corners\r\nCornerActivationFactory.TOP_LEFT = 'topLeft'\r\nCornerActivationFactory.TOP_RIGHT = 'topRight'\r\nCornerActivationFactory.BOTTOM_LEFT = 'bottomLeft'\r\nCornerActivationFactory.BOTTOM_RIGHT = 'bottomRight'\r\n\r\nexport const CornerActivation = CornerActivationFactory;\r\n","/**\r\n * An Activation that activates if a touch event is inside the selected activation split\r\n * The priority of the Activation helps prioritize between two overlaping Activation instances\r\n * @param {string} split - The selected activation split\r\n * @param {number} priority - The priority of the Activation\r\n */\r\nconst SplitActivationFactory = (split, priority) => {\r\n  let activationSplit = SplitActivationFactory.RIGHT\r\n  let priorityValue = 1\r\n  let splitSize = 0.5\r\n\r\n  if (split !== undefined) {\r\n    activationSplit = split\r\n  }\r\n\r\n  if (priority !== undefined) {\r\n    priorityValue = priority\r\n  }\r\n\r\n  /**\r\n   * Returns true if the touch event is inside the selected activation split and false otherwise.\r\n   * @param {Touch} touch - The current touch of the user \r\n   * @param {string} split - The selected activation split\r\n   * @param {number} splitSize - The size of the split area as a fraction of the screen width and height\r\n   */\r\n  let splitTriggered = (touch, split, splitSize) => {\r\n    const width = window.screen.width\r\n    const height = window.screen.height\r\n    switch(split) {\r\n      case SplitActivationFactory.TOP:\r\n        var y = height * splitSize\r\n        if (touch.screenY < y) {\r\n          return true\r\n        }\r\n        break\r\n      case SplitActivationFactory.LEFT:\r\n        var x = width * splitSize\r\n        if (touch.screenX < x) {\r\n          return true\r\n        }\r\n        break\r\n      case SplitActivationFactory.RIGHT:\r\n        var x = width * (1 - splitSize)\r\n        if (touch.screenX >= x) {\r\n          return true\r\n        }\r\n        break\r\n      case SplitActivationFactory.BOTTOM:\r\n        var y = height * (1 - splitSize)\r\n        if (touch.screenY >= y) {\r\n          return true\r\n        }\r\n        break\r\n      default:\r\n        return false\r\n    }\r\n    return false\r\n  }\r\n\r\n  return ({\r\n    /**\r\n     * Returns true if the Activation has been activated by the touch\r\n     * @param {Touch} touch - The current touch of the user\r\n     */\r\n    isActivated: (touch) => {\r\n      if (activationSplit === undefined) {\r\n        return false\r\n      }\r\n\r\n      return splitTriggered(touch, activationSplit, splitSize)\r\n    },\r\n\r\n    /**\r\n     * Sets the activation split\r\n     * @param {string} split - The activation split\r\n     */\r\n    setActivationSplit: (split) => {\r\n      if (side === SplitActivationFactory.TOP || \r\n        side === SplitActivationFactory.LEFT ||\r\n        side === SplitActivationFactory.RIGHT ||\r\n        side === SplitActivationFactory.BOTTOM) {\r\n          activationSplit = split\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns the priority of the action\r\n     */\r\n    getPriority: () => {\r\n      return priorityValue\r\n    },\r\n\r\n    /**\r\n     * Sets the priority of the action\r\n     * @param {number} priority - The priority\r\n     */\r\n    setPriority: (priority) => {\r\n      priorityValue = priority\r\n    }\r\n  });\r\n};\r\n\r\n// Supported splits\r\nSplitActivationFactory.TOP = 'top'\r\nSplitActivationFactory.LEFT = 'left'\r\nSplitActivationFactory.RIGHT = 'right'\r\nSplitActivationFactory.BOTTOM = 'bottom'\r\n\r\nexport const SplitActivation = SplitActivationFactory;\r\n","import * as util from \"../util/util\"\r\n\r\n/**\r\n * Sets the color of the feedForward element.\r\n * @param {DOMElement} feedForward - The element to change color\r\n * @param {string} color - The feed forward color \r\n */\r\nconst SimpleFeedForwardFactory = (feedForward, color) => {\r\n  let targetElement = undefined\r\n\r\n  let feedForwardElement = feedForward\r\n\r\n  let feedForwardColor = \"#80000088\"\r\n  let originalColor = \"#FFFFFF\"\r\n\r\n  if (color !== undefined) {\r\n    feedForwardColor = color\r\n  }\r\n\r\n  return ({\r\n    /**\r\n     * Sets the feed forward element\r\n     * @param {DOMElement} element - the feed forward elemen\r\n     */\r\n    setFeedForwardElement: (element) => {\r\n      feedForwardElement = element\r\n    },\r\n\r\n    /**\r\n     * Sets the feed forward color\r\n     * @param {string} color - The feed forward color\r\n     */\r\n    setFeedForwardColor: (color) => {\r\n      feedForwardColor = color\r\n    },\r\n\r\n    /**\r\n     * Sets the target element \r\n     * @param {DOMElement} element - The target element\r\n     */\r\n    _setTargetElement: (element) => {\r\n      targetElement = element\r\n    },\r\n\r\n    /**\r\n     * Handles the start event of a touch session\r\n     * @param {Touch} touch - The current touch of the user\r\n     */\r\n    _touchStart: (touch) => {\r\n      if (util.isElementAvailable(feedForwardElement)) {\r\n        try {\r\n          originalColor = feedForwardElement.style.backgroundColor\r\n        } catch(err) {\r\n          console.log(\"ERROR! Failed to get original backgroundColor from feedForwardElement!\")\r\n        }\r\n        util.setBackgroundColor(feedForwardElement, feedForwardColor)\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handles the move event during a touch session\r\n     * @param {Touch} touch - The current touch of the user\r\n     */\r\n    _touchMove: (touch) => {\r\n    },\r\n\r\n    /**\r\n     * Handles the end of a touch session\r\n     * @param {Touch} touch - The current touch of the user \r\n     */\r\n    _touchEnd: (touch) => {\r\n      if (util.isElementAvailable(feedForwardElement)) {\r\n        try {\r\n          feedForwardElement.style.backgroundColor = originalColor\r\n        } catch(err) {\r\n          console.log(\"ERROR! Failed to reset feedForwardElement to the original backgroundColor!\")\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n export const SimpleFeedForward = SimpleFeedForwardFactory;\r\n","import * as util from \"../util/util\"\r\n\r\n/**\r\n * Changes the color of the feedForward element based on the distance from the current touch to the targetElement\r\n * @param {DOMElement} feedForward - The element to change color\r\n * @param {string} baseColor - The base color for the color change\r\n * @param {string} intersectedColor - (optional) A color to be set if the targetElement is intersected\r\n */\r\nconst DistanceFeedForwardFactory = (feedForward, baseColor, intersectedColor) => {\r\n\r\n  let targetElement = undefined\r\n  let feedForwardElement = feedForward\r\n\r\n  let feedForwardBaseColor = \"#FF0000\"\r\n  let targetIntersectedColor = undefined\r\n  let originalColor = \"#FFFFFF\"\r\n\r\n  if (baseColor !== undefined) {\r\n    feedForwardBaseColor = baseColor\r\n  }\r\n\r\n  if (intersectedColor !== undefined) {\r\n    targetIntersectedColor = intersectedColor\r\n  }\r\n\r\n  return ({\r\n    /**\r\n     * Sets the feed forward element\r\n     * @param {DOMElement} element - the feed forward element\r\n     */\r\n    setFeedForwardElement: (element) => {\r\n      feedForwardElement = element\r\n    },\r\n\r\n    /**\r\n     * Sets the base color for the color change\r\n     * @param {string} color - The base color\r\n     */\r\n    setFeedForwardBaseColor: (color) => {\r\n      feedForwardBaseColor = color\r\n    },\r\n\r\n    /**\r\n     * Sets the intersection color to be set if the target element is intersected\r\n     * @param {string} color - The intersection color\r\n     */\r\n    setTargetIntersectedColor: (color) => {\r\n      targetIntersectedColor = color\r\n    },\r\n\r\n    /**\r\n     * Sets the target element \r\n     * @param {DOMElement} element - The target element\r\n     */\r\n    _setTargetElement: (element) => {\r\n      targetElement = element\r\n    },\r\n\r\n    /**\r\n     * Handles the start event of a touch session\r\n     * @param {Touch} touch - The current touch of the user\r\n     */\r\n    _touchStart: (touch) => {\r\n      if (util.isElementAvailable(targetElement)) {\r\n        if (util.isElementAvailable(feedForwardElement)) {\r\n          try {\r\n            originalColor = feedForwardElement.style.backgroundColor\r\n          } catch(err) {\r\n            console.log(\"ERROR! Failed to get original backgroundColor from feedForwardElement!\")\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handles the move event during a touch session\r\n     * @param {Touch} touch - The current touch of the user \r\n     */\r\n    _touchMove: (touch) => {\r\n      if (util.isElementAvailable(targetElement) && util.isElementAvailable(feedForwardElement)) {\r\n\r\n        if (targetIntersectedColor !== undefined && util.hitTest(targetElement, touch.pageX, touch.pageY)) {\r\n          util.setBackgroundColor(feedForwardElement, targetIntersectedColor)\r\n        } else {\r\n          util.setBackgroundColorBasedOnDistance(feedForwardElement, feedForwardBaseColor, targetElement, touch)\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handles the end of a touch session\r\n     * @param {Touch} touch - The current touch of the user \r\n     */\r\n    _touchEnd: (touch) => {\r\n      if (util.isElementAvailable(feedForwardElement)) {\r\n        try {\r\n          feedForwardElement.style.backgroundColor = originalColor\r\n        } catch(err) {\r\n          console.log(\"ERROR! Failed to reset feedForwardElement to the original backgroundColor!\")\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n export const DistanceFeedForward = DistanceFeedForwardFactory;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport './Guide.css';\r\nimport { \r\n  Manager,\r\n  SimpleAction,\r\n  DistanceFeedForward,\r\n  CornerActivation } from \"tactile-for-web\"\r\n\r\n/**\r\n * This example illustrates a flow where the user is guided to a series of targets with the help of CAMAR's SimpleAction and DistanceFeedForward.\r\n * The strength of the background color of the feedback elemnt, in this case the body element, illustrates the distance from the users current touch position to the target.\r\n * Once a target is intersected the action callback is triggered and the desired action can be performed. \r\n * This is also where the target is updated to the next target in the flow. \r\n */\r\nfunction Guide() {\r\n\r\n  const target1Ref = useRef(undefined)\r\n  const target2Ref = useRef(undefined)\r\n  const target3Ref = useRef(undefined)\r\n  const confirmRef = useRef(undefined)\r\n\r\n  useEffect(() => {\r\n    const actions = []\r\n    \r\n    const feedForward = DistanceFeedForward(document.body, undefined, \"#00800088\")\r\n    const action = SimpleAction(target1Ref.current, CornerActivation(CornerActivation.BOTTOM_RIGHT), feedForward, new Audio(\"./target1_intersected.mp3\"), undefined)\r\n    action.setActionCallback(function (target) {\r\n      var nextTarget = undefined\r\n      var nextSound = undefined\r\n\r\n      if (target === target1Ref.current) {\r\n        nextTarget = target2Ref.current\r\n        nextSound = new Audio(\"./target2_intersected.mp3\")\r\n      } else if (target === target2Ref.current) {\r\n        nextTarget = target3Ref.current\r\n        nextSound = new Audio(\"./target3_intersected.mp3\")\r\n      } else if (target === target3Ref.current) {\r\n        nextTarget = confirmRef.current\r\n        nextSound = new Audio(\"./confirm.mp3\")\r\n      } else if (target === confirmRef.current) {\r\n        Manager.stop();\r\n        document.body.style.backgroundColor = \"#00FF00\";\r\n      }\r\n\r\n      if (nextTarget !== undefined) {\r\n        action.setTargetElement(nextTarget)\r\n      }\r\n      if (nextSound !== undefined) {\r\n        action.setIntersectionSound(nextSound)\r\n      }\r\n    })\r\n    actions.push(action)\r\n\r\n    Manager.setActions(actions)\r\n    Manager.start()\r\n\r\n    return () => {\r\n      console.log(\"componentWillUnmount()\")\r\n      Manager.reset()\r\n      document.body.style.backgroundColor = \"#FFFFFF\";\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div className=\"Guide\">\r\n      <div class=\"container-site-title\">\r\n        <p>\r\n          Guide \r\n        </p>\r\n      </div>\r\n      <div class=\"buttonContainer1\">\r\n        <button class=\"guideButton\" ref={target1Ref}>\r\n          Target 1\r\n        </button>\r\n      </div>\r\n      <div class=\"buttonContainer2\">\r\n        <button class=\"guideButton\" ref={target2Ref}>\r\n            Target 2\r\n        </button>\r\n      </div>\r\n      <div class=\"buttonContainer3\">\r\n        <button class=\"guideButton\" ref={target3Ref}>\r\n            Target 3\r\n        </button>\r\n      </div>\r\n      <div class=\"buttonContainer4\">\r\n        <button class=\"guideButton\" ref={confirmRef}>\r\n            CONFIRM\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Guide;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport './Split.css';\r\nimport { \r\n  Manager,\r\n  ScrollAction,\r\n  SimpleFeedForward,\r\n  SplitActivation } from \"tactile-for-web\"\r\n\r\n\r\n/**\r\n * This example illustrates a simple user interface through which the user can turn the volume and temperature up and down.\r\n * By integrating with CAMAR's ScrollAction, SplitActivation and SimpleFeedForward the user is able to adjust the values by scrolling horizontally and vertically without directly interacting with the control elements.\r\n * Using the SplitActivation component enables the user to indicate which value(volume or temperature) to interact with by starting the touch session on either the left or right side of the screen.\r\n * The SimpleFeedForward component will clearly indicate which value the user is interacting with by setting the background color of the feedback element to the given color.\r\n * To activate the scroll intercatin the user have to keep her finger relatively still on the screen for 500 milliseconds. While the user is scrolling the ScrollAction's action callback will be triggered repeatedly.\r\n */\r\nfunction Split() {\r\n\r\n  const leftSplitRef = useRef(undefined)\r\n  const rightSplitRef = useRef(undefined)\r\n\r\n  const [volume, setVolume] = useState(16)\r\n  const volumeRef = useRef(volume)\r\n\r\n  const [temperature, setTemperature] = useState(21)\r\n  const temperatureRef = useRef(temperature)\r\n\r\n  function updateVolume(value) {\r\n    setVolume(value)\r\n    volumeRef.current = value\r\n  }\r\n\r\n  function updateTemperature(value) {\r\n    setTemperature(value)\r\n    temperatureRef.current = value\r\n  }\r\n\r\n  const volumeUp = () => {\r\n    Manager.playSound(new Audio(\"./volume_up.mp3\"), true)\r\n    updateVolume(volume + 1)\r\n  }\r\n\r\n  const volumeDown = () => {\r\n    Manager.playSound(new Audio(\"./volume_down.mp3\"), true)\r\n    updateVolume(volume - 1)\r\n  }\r\n\r\n  const temperatureUp = () => {\r\n    Manager.playSound(new Audio(\"./temperature_up.mp3\"), true)\r\n    updateTemperature(temperature + 1)\r\n  }\r\n\r\n  const temperatureDown = () => {\r\n    Manager.playSound(new Audio(\"./temperature_down.mp3\"), true)\r\n    updateTemperature(temperature - 1)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const actions = []\r\n\r\n    const leftSplit = ScrollAction(ScrollAction.HORIZONTAL, SplitActivation(SplitActivation.LEFT), SimpleFeedForward(leftSplitRef.current), (moveDirection) => {\r\n      if (moveDirection === ScrollAction.MOVEMENT_RIGHT) {\r\n        updateVolume(volumeRef.current + 1)\r\n        Manager.playSound(new Audio(\"./volume_up.mp3\"), false)\r\n      } else if (moveDirection === ScrollAction.MOVEMENT_LEFT) {\r\n        updateVolume(volumeRef.current - 1)\r\n        Manager.playSound(new Audio(\"./volume_down.mp3\"), false)\r\n      }\r\n    })\r\n    actions.push(leftSplit)\r\n\r\n    const rightSplit = ScrollAction(ScrollAction.VERTICAL, SplitActivation(SplitActivation.RIGHT), SimpleFeedForward(rightSplitRef.current, \"#00800088\"), (moveDirection) => {\r\n      if (moveDirection === ScrollAction.MOVEMENT_UP) {\r\n        updateTemperature(temperatureRef.current + 1)\r\n        Manager.playSound(new Audio(\"./temperature_up.mp3\"), false)\r\n      } else if (moveDirection === ScrollAction.MOVEMENT_DOWN) {\r\n        updateTemperature(temperatureRef.current - 1)\r\n        Manager.playSound(new Audio(\"./temperature_down.mp3\"), false)\r\n      }\r\n    })\r\n    actions.push(rightSplit)\r\n    \r\n\r\n    Manager.setActions(actions)\r\n    Manager.start()\r\n\r\n    return () => {\r\n      console.log(\"componentWillUnmount()\")\r\n      Manager.reset()\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"Split\">\r\n      <div class=\"split\" ref={leftSplitRef}>\r\n        <div class=\"split-container-title\">\r\n          <p>\r\n            Volume \r\n          </p>\r\n        </div>\r\n        <div class=\"split-container-text\">\r\n          <p>\r\n            {volume}\r\n          </p>\r\n        </div>\r\n        <div class=\"split-corner\">\r\n          <div class=\"split-button-container-top\">\r\n            <button class=\"corner-button\" onClick={volumeUp}>\r\n              +\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div class=\"split-corner\">\r\n          <div class=\"split-button-container-bottom\">\r\n            <button class=\"corner-button\" onClick={volumeDown}>\r\n              -\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"split\" ref={rightSplitRef}>\r\n        <div class=\"split-container-title\">\r\n          <p>\r\n            Temperature\r\n          </p>\r\n        </div>\r\n        <div class=\"split-container-text\">\r\n          <p>\r\n            {temperature}\r\n          </p>\r\n        </div>\r\n        <div class=\"split-corner\">\r\n          <div class=\"split-button-container-top\">\r\n            <button class=\"corner-button\" onClick={temperatureUp}>\r\n              +\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div class=\"split-corner\">\r\n          <div class=\"split-button-container-bottom\">\r\n            <button class=\"corner-button\" onClick={temperatureDown}>\r\n              -\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"container-site-title\">\r\n        <p>\r\n          Split \r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Split;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport './Corner.css';\r\nimport { \r\n  Manager,\r\n  TriggerOutsideAction,\r\n  SimpleFeedForward,\r\n  DistanceFeedForward,\r\n  CornerActivation } from \"tactile-for-web\"\r\n\r\n/**\r\n * This example illustrates a simple user interface through which the user can turn the volume and temperature up and down.\r\n * The example makes use of CAMAR's TriggerOutsideAction, CornerActivation, SimpleFeedForward and DistanceFeedForward.\r\n * Each of the control elements are mapped to a corner of the screen. By starting the touch session close to one of the corners the action of the control element mapped to that corner will be locked and performed.\r\n * Fx. if the user wants to turn down the volume, she would start the touch session in the bottom left corner.\r\n * To change action, the user have to lift her finger to end the touch session and begin a new touch session from the corner mapped to the desired action.\r\n * In this example interacting with the volume controls differ slightly from interacting with the temperature controls.\r\n * This is because the TriggerOutsideAction callbacks for volume is set to trigger outside the control element when the users finger has been still on the screen for 500 milliseconds. \r\n * Meanwhile the TriggerOutsideAction's for temperature will only trigger when the user intersects with the temperature control elements.\r\n * Because the volume actions can be triggered everywhere on the screen the SimpleFeedForward component is used to indicate which action the user is performing.\r\n * For interacting with the temperature the user is guided to the control elements by the DistanceFeedForward conponent.\r\n */\r\nfunction Corner() {\r\n\r\n  const buttonRefVolumeUp = useRef(undefined)\r\n  const buttonRefVolumeDown = useRef(undefined)\r\n  const buttonRefTempUp = useRef(undefined)\r\n  const buttonRefTempDown = useRef(undefined)\r\n\r\n  const [volume, setVolume] = useState(16)\r\n  const volumeRef = useRef(volume)\r\n\r\n  const [temperature, setTemperature] = useState(21)\r\n  const temperatureRef = useRef(temperature)\r\n\r\n  function updateVolume(value) {\r\n    setVolume(value)\r\n    volumeRef.current = value\r\n  }\r\n\r\n  function updateTemperature(value) {\r\n    setTemperature(value)\r\n    temperatureRef.current = value\r\n  }\r\n\r\n  const volumeUp = () => {\r\n    Manager.playSound(new Audio(\"./volume_up.mp3\"), true)\r\n    updateVolume(volume + 1)\r\n  }\r\n\r\n  const volumeDown = () => {\r\n    Manager.playSound(new Audio(\"./volume_down.mp3\"), true)\r\n    updateVolume(volume - 1)\r\n  }\r\n\r\n  const temperatureUp = () => {\r\n    Manager.playSound(new Audio(\"./temperature_up.mp3\"), true)\r\n    updateTemperature(temperature + 1)\r\n  }\r\n\r\n  const temperatureDown = () => {\r\n    Manager.playSound(new Audio(\"./temperature_down.mp3\"), true)\r\n    updateTemperature(temperature - 1)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const actions = []\r\n\r\n    // VOLUME UP setup\r\n    const simpleFeedForwardUp = SimpleFeedForward(document.body, \"#00FF0088\")\r\n    const volumeUp = TriggerOutsideAction(buttonRefVolumeUp.current, CornerActivation(CornerActivation.TOP_LEFT), simpleFeedForwardUp, new Audio(\"./volume_up.mp3\"), () => {\r\n      updateVolume(volumeRef.current + 1)\r\n    })\r\n    volumeUp.setTriggerRepeatedly(true)\r\n    volumeUp.setTriggerOutsideTarget(true)\r\n    actions.push(volumeUp)\r\n\r\n    // VOLUME DOWN setup\r\n    const simpleFeedForwardDown = SimpleFeedForward(document.body, \"#0000FF88\")\r\n    const volumeDown = TriggerOutsideAction(buttonRefVolumeDown.current, CornerActivation(CornerActivation.BOTTOM_LEFT), simpleFeedForwardDown, new Audio(\"./volume_down.mp3\"), () => {\r\n      updateVolume(volumeRef.current - 1)\r\n    })\r\n    volumeDown.setTriggerRepeatedly(true)\r\n    volumeDown.setTriggerOutsideTarget(true)\r\n    actions.push(volumeDown)\r\n\r\n    // TEMPERATURE UP setup\r\n    const distanceFeedForwardUp = DistanceFeedForward(document.body)\r\n    const tempUp = TriggerOutsideAction(buttonRefTempUp.current, CornerActivation(CornerActivation.TOP_RIGHT), distanceFeedForwardUp, new Audio(\"./temperature_up.mp3\"), () => {\r\n      updateTemperature(temperatureRef.current + 1)\r\n    })\r\n    tempUp.setTriggerRepeatedly(true)\r\n    actions.push(tempUp)\r\n\r\n    // TEMPERATURE DOWN setup \r\n    const distanceFeedForwardDown = DistanceFeedForward(document.body)\r\n    distanceFeedForwardDown.setTargetIntersectedColor(\"#00800088\")\r\n    const tempDown = TriggerOutsideAction(buttonRefTempDown.current, CornerActivation(CornerActivation.BOTTOM_RIGHT), distanceFeedForwardDown, new Audio(\"./temperature_down.mp3\"), () => {\r\n      updateTemperature(temperatureRef.current - 1)\r\n    })\r\n    tempDown.setTriggerRepeatedly(true)\r\n    actions.push(tempDown)\r\n\r\n    // SET actions and START\r\n    Manager.setActions(actions)\r\n    Manager.start()\r\n\r\n    return () => {\r\n      console.log(\"componentWillUnmount()\")\r\n      Manager.reset()\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"Corner\">\r\n      <div class=\"corner-side\">\r\n        <div class=\"corner-container-title\">\r\n          <p>\r\n            Volume \r\n          </p>\r\n        </div>\r\n        <div class=\"corner-container-text\">\r\n          <p>\r\n            {volume}\r\n          </p>\r\n        </div>\r\n        <div class=\"corner\">\r\n          <div class=\"corner-button-container-top\">\r\n            <button class=\"corner-button\" ref={buttonRefVolumeUp} onClick={volumeUp}>\r\n              +\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div class=\"corner\">\r\n          <div class=\"corner-button-container-bottom\">\r\n            <button class=\"corner-button\" ref={buttonRefVolumeDown} onClick={volumeDown}>\r\n              -\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"corner-side\">\r\n        <div class=\"corner-container-title\">\r\n          <p>\r\n            Temperature \r\n          </p>\r\n        </div>\r\n        <div class=\"corner-container-text\">\r\n          <p>\r\n            {temperature}\r\n          </p>\r\n        </div>\r\n        <div class=\"corner\">\r\n          <div class=\"corner-button-container-top\">\r\n            <button class=\"corner-button\" ref={buttonRefTempUp} onClick={temperatureUp}>\r\n              +\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div class=\"corner\">\r\n          <div class=\"corner-button-container-bottom\">\r\n            <button class=\"corner-button\" ref={buttonRefTempDown} onClick={temperatureDown}>\r\n              -\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"container-site-title\">\r\n        <p>\r\n          Corner \r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Corner;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport './PlaceCargo.css';\r\nimport { \r\n  Manager,\r\n  SimpleAction,\r\n  DistanceFeedForward,\r\n  CornerActivation } from \"tactile-for-web\"\r\n\r\n\r\n/**\r\n * This example guides the user through the flow of placing the cargo at the optimal storage position and the confirming the placement.\r\n * This is done by integrating with CAMAR's SimpleAction and DistanceFeedForward components.\r\n * The background color of the feedback element guides the users touch towards the optimal storage position. Once the user intersects the target position the action callback is triggered and the cargo is placed.\r\n * Next the confirm button is set as the next target in the flow and the users touch is now guided towards this new target.\r\n * \r\n * If the user wants to cancel the flow she can start a touch session in the bottom left corner. Because canceling is a \"serious\" action, the action callback will only trigger once the users touch intersect the cancle button.\r\n * The users touch is guided to the cancel button with the help of the DistanceFeedForward component.\r\n */\r\nfunction PlaceCargo() {\r\n\r\n  const optimalPositionRef = useRef(undefined)\r\n  const truckRef = useRef(undefined)\r\n  const confirmRef = useRef(undefined)\r\n  const cancelRef = useRef(undefined)\r\n\r\n  const confirm = () => {\r\n    Manager.playSound(new Audio(\"./confirm.mp3\"), true)\r\n  }\r\n\r\n  const cancel = () => {\r\n    truckRef.current.style.display = 'none'\r\n    Manager.playSound(new Audio(\"./cancel.mp3\"), true)\r\n  }\r\n\r\n  function placeCargo() {\r\n    truckRef.current.style.display = 'inline-block'\r\n    confirmRef.current.disabled = false\r\n    Manager.playSound(new Audio(\"./cargo_placed.mp3\"), true)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const actions = []\r\n    confirmRef.current.disabled = true\r\n\r\n    optimalPositionRef.current.addEventListener('click', function (event) {\r\n      placeCargo()\r\n    });\r\n\r\n    // Setup flow for placing container at optimal location and then confirming\r\n    const feedForward = DistanceFeedForward(document.body, \"#00FF00\", \"#00800088\")\r\n    const action = SimpleAction(optimalPositionRef.current, undefined, feedForward, undefined, undefined)\r\n    action.setActionCallback(function (targetElement) {\r\n      var nextTarget = undefined\r\n      var nextSound = undefined\r\n\r\n      if (targetElement === optimalPositionRef.current) {\r\n        placeCargo()\r\n        nextTarget = confirmRef.current\r\n      } else if (targetElement === confirmRef.current) {\r\n        Manager.stop()\r\n        confirm()\r\n        document.body.style.backgroundColor = \"#00FF00\";\r\n      }\r\n\r\n      if (nextTarget !== undefined) {\r\n        action.setTargetElement(nextTarget)\r\n      }\r\n      action.setIntersectionSound(nextSound)\r\n    })\r\n    actions.push(action)\r\n\r\n    // Setup cancel button\r\n    const cancelFeedForward = DistanceFeedForward(document.body, \"#FF0000\", \"#80000088\")\r\n    const cancelAction = SimpleAction(cancelRef.current, CornerActivation(CornerActivation.BOTTOM_LEFT), cancelFeedForward, undefined, () => {\r\n      Manager.stop()\r\n      cancel()\r\n      document.body.style.backgroundColor = \"#FFFFFF\";\r\n    })\r\n    actions.push(cancelAction)\r\n\r\n    // Add the interactions and start the TactileFeedbackHandler\r\n    Manager.setActions(actions)\r\n    Manager.start()\r\n\r\n    return () => {\r\n      console.log(\"componentWillUnmount()\")\r\n      // Stop and reset the TactileFeedbackHandler before destroying the component\r\n      Manager.reset()\r\n      document.body.style.backgroundColor = \"#FFFFFF\";\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div className=\"PlaceCargo\">\r\n      <div class=\"container\">\r\n        <div class=\"lane validLane\">\r\n          <div class=\"optimal-position\" ref={optimalPositionRef}>\r\n            <img class=\"draggable\" alt=\"truck\" src=\"./truck.png\" ref={truckRef} />\r\n          </div>\r\n        </div>\r\n        <div class=\"lane invalidLane\"></div>\r\n      </div>\r\n      <div class=\"cancel-button-container\">\r\n        <button class=\"button\" ref={cancelRef} onClick={cancel}>\r\n          CANCEL\r\n        </button>\r\n      </div>\r\n      <div class=\"confirm-button-container\">\r\n        <button class=\"button\" ref={confirmRef} onClick={confirm}>\r\n          CONFIRM\r\n        </button>\r\n      </div>\r\n      <div class=\"container-site-title\">\r\n        <p>\r\n          Place Cargo\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlaceCargo;\r\n","import React, { useRef, useState } from \"react\";\r\nimport \"./ComponentSelector.css\"\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Manager } from \"tactile-for-web\"\r\nimport Guide from \"./Guide\";\r\nimport Split from \"./Split\"\r\nimport Corner from \"./Corner\";\r\nimport PlaceCargo from \"./PlaceCargo\";\r\n\r\nconst initialComponent = () => <Guide />\r\n\r\nfunction ComponentSelector() {\r\n  const vibrationStatusRef = useRef(undefined)\r\n\r\n  const [currentComponent, setCurrentComponent] = useState(initialComponent);\r\n\r\n  function updateStatusElement() {\r\n    if (vibrationStatusRef.current !== undefined) {\r\n      const vibrationStatus = vibrationStatusRef.current\r\n      if (Manager.isFeedbackActivated() === true) {\r\n        vibrationStatus.style.color = \"#008000\"\r\n        vibrationStatus.textContent = 'Activated'\r\n      } else {\r\n        vibrationStatus.style.color = \"#80808080\"\r\n        vibrationStatus.textContent = 'Deactivated'\r\n      }\r\n    }\r\n  }\r\n\r\n  document.body.addEventListener('mouseup', function() {\r\n    updateStatusElement()\r\n  }, true);\r\n  \r\n  return (\r\n    <div className=\"ComponentSelector\">\r\n      { currentComponent }\r\n      <div class=\"container-vibration-status\">\r\n        <p ref={vibrationStatusRef}>\r\n          Deactivated\r\n        </p> \r\n      </div>\r\n      <div class=\"container-links\">\r\n        <Button onClick={ () => setCurrentComponent(<Guide />) } >Guide</Button> &nbsp;/&nbsp;\r\n        <Button onClick={ () => setCurrentComponent(<Split />) } >Split</Button> &nbsp;/&nbsp;\r\n        <Button onClick={ () => setCurrentComponent(<Corner />) } >Corner</Button> &nbsp;/&nbsp;\r\n        <Button onClick={ () => setCurrentComponent(<PlaceCargo />) } >Cargo</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ComponentSelector;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport ComponentSelector from './ComponentSelector';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ComponentSelector />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}